apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: app-replicas
  labels:
    task: task2
spec:
  replicas: 3
  selector: 
    matchLabels:
      app: flask
  template:
    metadata:
      name: flask-app
      labels:
        app: flask
    spec:
     containers:
      - image: agray998/task2-app
        name: flask-app
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-root-password
              key: password

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: flask
  name: flask-app
spec:
  ports:
  - port: 5000
    protocol: TCP
  selector:
    app: flask
  type: ClusterIP

---

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: flask
  name: flask-app
spec:
  containers:
  - env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-root-password
          key: password
    image: agray998/task2-app
    imagePullPolicy: IfNotPresent
    name: flask-app
    ports:
    - containerPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  type: ClusterIP
  selector:
    run: task2-db
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306

---

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: task2-db
  name: mysql
spec:
  containers:
  - env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-root-password
          key: password
    name: task2-db
    image: agray998/task2-db
    ports:
    - containerPort: 80